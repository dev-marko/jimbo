{
  "env": {
    "browser": true,
    "es2021": true,
    "jest": true
  },
  "extends": [
    "plugin:react/recommended",
    "airbnb",
    "airbnb-typescript",
    "next/core-web-vitals"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"]
  },
  "plugins": ["react", "@typescript-eslint"],
  "overrides": [
    {
      // The "*.ts/tsx files", and "typescript-eslint/reccommended" plugin are needed so we can specify
      // that the typescript linting rules are applied only to the typescript files
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@typescript-eslint/recommended"]
    }
  ],
  "rules": {
    "linebreak-style": 0,
    "no-undef": "off",
    "object-curly-newline": "off",
    "operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          ":": "before"
        }
      }
    ],
    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/aria-role": "off",
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "no-use-before-define": "off",
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".tsx"]
      }
    ],
    "no-restricted-exports": "off",
    // React 17 allows us to use JSX without importing "react"
    "react/react-in-jsx-scope": "off",
    // We're using babel-plugin-typescript-to-proptypes so we don't need to write prop-types manually
    "react/prop-types": "off",
    "space-before-blocks": "off",
    "@typescript-eslint/space-before-blocks": ["off"],
    // Optional props are handled by typescript.
    "react/require-default-props": "off",
    // The inferred return types are sufficient for our needs
    "@typescript-eslint/explicit-module-boundary-types": "off",
    // Disabling to make changing react components
    "arrow-body-style": "off",
    "no-underscore-dangle": "off",
    "no-async-promise-executor": "off",
    "no-await-in-loop": "off",
    // The base "no-shadow" rule needs to be disabled to allow some typescript features to work correctly (e.g. enums).
    // "@typescript-eslint/no-shadow" extends "no-shadow" and enables the necessary checks.
    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-shadow.md#how-to-use
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    // The base "no-useless-constructor" rule is incorrectly triggered for typescript parameter properties.
    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-useless-constructor.md#how-to-use
    "no-useless-constructor": 0,
    "@typescript-eslint/no-useless-constructor": ["error"],
    // Extracting a partial object with destructuring assignment triggers this rule.
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "ignoreRestSiblings": true
      }
    ],
    // Enforce consistent delimiters in TS syntax. By default this is set to semicolon.
    "@typescript-eslint/member-delimiter-style": "error",
    // Replace 'semi' with '@typescript-eslint/semi' to include TS syntax like 'type' declarations in the check
    "semi": "off",
    "@typescript-eslint/semi": "error",
    // We want to be able to create a thin wrapper that simply passes the props.
    "react/jsx-props-no-spreading": "off",
    // Check indentation for attributes and logical expressions (off by default)
    "react/jsx-indent": [
      "error",
      2,
      {
        "checkAttributes": true,
        "indentLogicalExpressions": true
      }
    ],
    // Named exports make more sense than default exports in some cases (e.g. exporting a hook, keeping the name fixed makes it obvious).
    "import/prefer-default-export": "off",
    "react/function-component-definition": "off",
    "react/no-unstable-nested-components": [
      "error",
      {
        "allowAsProps": true
      }
    ],
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal"],
        "newlines-between": "always"
      }
    ],
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "": "never",
        "js": "never",
        "jsx": "never",
        "ts": "never",
        "tsx": "never"
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".ts", ".tsx"],
        "moduleDirectory": ["node_modules", "src/"]
      }
    }
  }
}
